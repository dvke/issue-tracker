generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change the provider to "postgresql"
  url      = env("DATABASE_URL")
}

model Issue {
  id               Int      @id @default(autoincrement())
  title            String   // Remove @db.VarChar(255) as Prisma will handle data types
  description      String   // Remove @db.Text as Prisma will handle data types
  status           Status   @default(OPEN)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  assignedToUserId String?  // Remove @db.VarChar(255) as Prisma will handle data types
  assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id])
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  // Remove @db.Text as Prisma will handle data types
  access_token       String?  // Remove @db.Text as Prisma will handle data types
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  // Remove @db.Text as Prisma will handle data types
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  assignedIssues Issue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
